# solve the model and print a graph
function y_params = solveModel(save_name = "dynamics", return_max_infected = 0, return_full_matrix = 0)
global rho_empty_1;
global rho_empty_2;
global rho_1_2;
global rho_2_1;
global N;
global r_empty_initial;
global r_1_initial;
global r_2_initial;
global r_1_2_initial;
global r_empty_i_1_initial;
global r_empty_i_2_initial;
global r_1_i_2_initial;
global r_2_i_1_initial;
global d_initial;
global days;
global needGraph;
global last_dynamics;
  r_empty_initial = 10000-700 ;
  r_1_initial = 100;
  r_2_initial = 100;
  r_1_2_initial = 100;
  r_empty_i_1_initial = 100;
  r_empty_i_2_initial = 100;
  r_1_i_2_initial = 100;
  r_2_i_1_initial = 100;
  d_initial = 0;

  # consts
  HOURS_PER_DAY = 24;
  days = 2;
  initial_condition = [ r_empty_initial; r_1_initial; r_2_initial; r_1_2_initial; r_empty_i_1_initial; r_empty_i_2_initial; r_1_i_2_initial; r_2_i_1_initial; d_initial; ] ;
  N = r_empty_initial + r_1_initial + r_2_initial + r_1_2_initial + r_empty_i_1_initial + r_empty_i_2_initial + r_1_i_2_initial + r_2_i_1_initial + d_initial ;
  
  # solve the ODEs
  # assume each step is an hour - very important
  x = lsode("mutationSirModel", initial_condition, (t = linspace(0, HOURS_PER_DAY * days, HOURS_PER_DAY * days)' ));
  for i = 1:size(x)(1)
    if x(i, 2) > N
    x(i, 2) = N;
    endif
  
    if x(i, 3) > N
    x(i, 3) = N;
    endif
  
    if x(i, 6) > N
    x(i, 6) = N;
    endif
  
    if x(i, 7) > N
    x(i, 7) = N;
    endif
  endfor
  


# colors consts  
  colors = {[0.859, 0.267, 0.216], [0.922, 0.114, 0.047], [0.059, 0.616, 0.345], [0.102, 0.729, 0.49], [0.259, 0.522, 0.957], [0.451, 0.627, 0.922], [0.05, 0.05, 0.05], [0.03, 0.07, 0] , [0.03, 0.07, 0]};
  colors_names = {"green", "green", "red", "red", "blue", "blue", "pink", "yellow", "black" };
  colors_letters = {"g", "b", "b", "r", "r", "c", "c", "y", "k" };
    
# plot the results
   fig = figure();
   hold on;
    for i = 1:size(x)(2)
      if i == 2 || i == 4 || i==6
                plot(t, x(:,i), strcat("--", colors_letters(i)));
      else
        plot(t, x(:,i), strcat("-", colors_letters(i)));
      endif
    endfor
   hold off;
   
# set plot info
    xlim ([0, HOURS_PER_DAY * days * 1.05]);
    ylim ([0, max(max(x)) * 1.05]);
    title ("Mutation Model Dynamics");
    xlabel ("Time [hours]");
    ylabel ("Normalized population size");
    legend ("R_{emptyset}", "R_{emptyset}I_1", "R_{emptyset}I_2", "R_1", "R_2", "R_1I_2", "R_2I_1", "R_{1,2}", "D" );
  
endfunction

# the model defintion (parms and aqs)
  function xdot = mutationSirModel(x, t)
  # use parameters
  beta_empty_1 = 0.4;
  beta_empty_2 = 0.45;
  beta_1_2 = 0.3;
  beta_2_1 = 0.35;
  gama_empty_1 = 0.07 ;
  gama_empty_2 = 0.075 ;
  gama_1_2 = 0.09 ;
  gama_2_1 = 0.095 ;
  rho_empty_1 = 0.945;
  rho_empty_2 = 0.94;
  rho_1_2 = 0.9;
  rho_2_1 = 0.95;
  global N;
  
    if x(2) > N
    x(2) = N;
  endif
  
  if x(3) > N
    x(3) = N;
  endif
  
   if x(6) > N
    x(6) = N;
  endif
  
   if x(7) > N
    x(7) = N;
  endif
 
  
  # model itself
  xdot(1) = -1 * ( beta_empty_1 * x(2) * x(1) + beta_empty_2 * x(3) * x(1) ) ;
  xdot(2) = beta_empty_1 * x(2) * x(1) - ( gama_empty_1 * x(2) ) ;
  xdot(3) = beta_empty_2 * x(3) * x(1) - ( gama_empty_2 * x(3) ) ;
  xdot(4) = (gama_empty_1 * rho_empty_1 * x(2)) - ( beta_1_2 * x(6) * x(4) ) ;
  xdot(5) = (gama_empty_2 * rho_empty_2 * x(3)) - ( beta_2_1 * x(7) * x(5) ) ;
  xdot(6) = beta_1_2 * x(6) * x(4) - ( gama_1_2 * x(6) ) ;
  xdot(7) = beta_2_1 * x(7) * x(5) - ( gama_2_1 * x(7) ) ;
  xdot(8) = gama_2_1 * rho_2_1 * x(7) + gama_1_2 * rho_1_2 * x(6) ;
  xdot(9) = gama_empty_1 * (1 - rho_empty_1) * x(2) + gama_2_1 * (1 - rho_2_1) * x(7) + gama_empty_2 *(1 - rho_empty_2) * x(3) + gama_1_2 * (1 - rho_1_2) * x(6) ;


   
  endfunction 
